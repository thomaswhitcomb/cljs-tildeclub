(defn build-table-fn [universe maxx ]
 (fn [accum [x y]]
   (let [ accum1
         (cond
           (= (universe [x y]) :l) (str accum  "<td class='live'></td>")
           :else (str accum "<td class='dead'></td>"))]
     (if (= x maxx )
       (str accum1 "</tr><tr>")
       accum1))))

(defn compute-bounding-box [universe]
  (if (= (count universe) 0)
    [1 20 1 20]
    (do
      (def margin 0)
    (def bounding-box [20 20])
    (def minx (- (apply min (map (fn [[x y]] x) (keys (select-alive universe)))) margin))
    (def maxx (+ (apply max (map (fn [[x y]] x) (keys (select-alive universe)))) margin))
    (def miny (- (apply min (map (fn [[x y]] y) (keys (select-alive universe)))) margin))
    (def maxy (+ (apply max (map (fn [[x y]] y) (keys (select-alive universe)))) margin))
    (def lmarginx (quot (- (first bounding-box) (inc (- maxx minx))) 2))
    (def rmarginx (. js/Math round (/ (- (first bounding-box) (inc (- maxx minx))) 2)))
    (def tmarginy (quot (- (second bounding-box) (inc (- maxy miny))) 2))
    (def bmarginy (. js/Math round (/ (- (second bounding-box) (inc (- maxy miny))) 2)))
    [(- minx lmarginx) (+ rmarginx maxx) (- miny tmarginy) (+ bmarginy maxy)])))

(defn display
  [html-ele universe]
  (let [[minx maxx miny maxy] (compute-bounding-box universe)
        f (build-table-fn universe maxx)
        table (str "<table><th colspan='" (inc (- maxx minx)) "'>" minx "," maxx ":" miny "," maxy "</th><tr>")
        span (for [y (range maxy (- miny 1) -1)
                   x (range minx (+ maxx 1) 1) ] [x y])
        html (str (reduce f table span) "</tr></table")]
    (dom/add-html html-ele html)))
